import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Use it to change acceleration and length
g = 9.8 
l = 1.0   

def pendulum_ode(t, y):
    """
    Defines diff equations for the pendulum.
    y[0]: theta (angular position)
    y[1]: omega (angular velocity)
    """
    theta, omega = y
    dydt = [omega, - (g / l) * np.sin(theta)]
    return dydt

# Use it to change time interval
t_span = (0, 10)  # From t=0 to t=10 seconds
t_eval = np.linspace(t_span[0], t_span[1], 1000)  # Time points where the solution is evaluated

# Use these lines to change the range of initial conditions
theta_vals = np.linspace(-2 * np.pi, 2 * np.pi, 20)  # Initial angular positions
omega_vals = np.linspace(-5, 5, 20)                  # Initial angular velocities

plt.figure(figsize=(10, 6))

# Loop over initial conditions to solve the ODE and plot the trajectories
for theta0 in theta_vals:
    for omega0 in omega_vals:
        # Initial conditions: [theta0, omega0]
        sol = solve_ivp(pendulum_ode, t_span, [theta0, omega0], t_eval=t_eval)
        theta_sol = sol.y[0]
        omega_sol = sol.y[1]
        # Plot the phase trajectory
        plt.plot(theta_sol, omega_sol, color='blue', linewidth=0.5)

# Configure the plot
plt.title('Phase Portrait of a Simple Pendulum')
plt.xlabel('Angular Position θ (radians)')
plt.ylabel('Angular Velocity ω (radians/second)')
plt.grid(True)
plt.xlim(-2 * np.pi, 2 * np.pi)
plt.ylim(-10, 10)
plt.show()
